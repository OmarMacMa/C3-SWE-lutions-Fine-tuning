[
    {
        "repo": "django/django",
        "instance_id": "django__django-16139",
        "base_commit": "d559cb02da30f74debbb1fc3a46de0df134d2d80",
        "patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,9 @@ def __init__(self, *args, **kwargs):\n     super().__init__(*args, **kwargs)\n     password = self.fields.get(\"password\")\n     if password:\n-        password.help_text = password.help_text.format(\"../password/\")\n+        password.help_text = password.help_text.format(\n+            f\"../../{self.instance.pk}/password/\"\n+        )\n     user_permissions = self.fields.get(\"user_permissions\")\n     if user_permissions:\n         user_permissions.queryset = user_permissions.queryset.select_related(",
        "test_patch": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,5 +1,6 @@\n import datetime\n import re\n+import urllib.parse\n from unittest import mock\n\n from django.contrib.auth.forms import (\n@@ -22,6 +23,7 @@\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.urls import reverse\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n@@ -892,6 +894,26 @@ def test_bug_19349_bound_password_field(self):\n     self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)",
        "problem_statement": "Accessing the UserAdmin via a to_field URL breaks the password reset form link (results in 404). This occurs because the password reset link is constructed assuming access by PK. Fix: use `self.instance.pk` explicitly in the help text.",
        "FAIL_TO_PASS": [
            "test_link_to_password_reset_in_helptext_via_to_field (auth_tests.test_forms.UserChangeFormTest)"
        ],
        "PASS_TO_PASS": [
            "test_password_whitespace_not_stripped (auth_tests.test_forms.PasswordChangeFormTest)",
            "test_success (auth_tests.test_forms.PasswordChangeFormTest)",
            "test_success (auth_tests.test_forms.UserChangeFormTest)"
        ],
        "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
        "difficulty": "<15 min fix",
        "image_name": "python:3.11"
    },
    {
        "repo": "django/django",
        "instance_id": "django__django-16333",
        "base_commit": "60a7bd89860e504c0c33b02c78edcac87f6d1b5a",
        "patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,8 @@ def save(self, commit=True):\n     user.set_password(self.cleaned_data[\"password1\"])\n     if commit:\n         user.save()\n+    if hasattr(self, \"save_m2m\"):\n+        self.save_m2m()\n     return user",
        "test_patch": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -35,6 +35,7 @@\n )\n from .models.with_custom_email_field import CustomEmailField\n from .models.with_integer_username import IntegerUsernameUser\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .settings import AUTH_TEMPLATES\n\n@@ -252,6 +253,25 @@ class Meta(UserCreationForm.Meta):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])",
        "problem_statement": "UserCreationForm did not save data from ManyToMany form fields (e.g. ModelMultipleChoiceField), because `save_m2m()` was not being called in its save method. This patch fixes that omission.",
        "FAIL_TO_PASS": [
            "test_custom_form_saves_many_to_many_field (auth_tests.test_forms.UserCreationFormTest)"
        ],
        "PASS_TO_PASS": [
            "test_custom_form (auth_tests.test_forms.UserCreationFormTest)",
            "test_password_verification (auth_tests.test_forms.UserCreationFormTest)",
            "test_success (auth_tests.test_forms.UserCreationFormTest)"
        ],
        "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
        "difficulty": "<15 min fix",
        "image_name": "python:3.11"
    }
]
